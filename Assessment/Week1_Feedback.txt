Starting weekly assessment for David Thomas, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.49 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

Author : David Scott 
Contact: david.scott18@imperial.ac.uk

Within this CMEECourseWork directory can be found an individual directory for each week of course work undertaken. Each directory is further subdivided into four folders; Code, Data, Results and Sandbox. 

Within the Code directory can be found all code and scripts produced for that week. Each script call's data from the Data directory (../Data) where all data inputs are stored! Finally all output generated are sent and stored in the Results (../Results) directories. 

Each results directory contains a .gitignore file so as to keep the git repository clean. However all results can be regenerated by running the code provided on the data. 

Sandbox 

Software:
Ubunto
python3 
blah blah 
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: Week1, Week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Author: David Scott David.Scott18@imperial.ac.uk
Desc: README file outlining subdirectories and content of Week1 directory
Date: Oct 2018

Summary: 
All files created using Ubunto, LaTex and bibtex as part of CMEE week 1. 
All code data and results are contained in their respective directories. 
Scripts either call from data directory or are written with a variable, in such case use bash SCRIPTNAME.sh ../Data/FILENAME

.
├── Code
│   ├── boilerplate.sh 		   Simple boilerplate for shell scripts
│   ├── CompileLaTeX.sh		   Compile LaTeX with bibtex
│   ├── ConcatenateTwoFiles.sh	   Merges two files
│   ├── CountLines.sh              Counts lines within a file
│   ├── csvtospace.sh		   Converts a comma seperated file to a space seperated file
│   ├── FirstBiblio.bib		   Example of a biblio reference
│   ├── FirstExample.tex	   Example of a LaTeX script
│   ├── MyExampleScript.sh	   Example shell script using variables
│   ├── tabtocsv.sh		   Converts a tab seperated file to a comma seprated file
│   ├── tiff2png.sh		   Converts a .tif file to a .png file
│   ├── TranslateEg.sh		   Three uses of the translate (tr) command: Remove spaces, letters, change case
│   ├── UnixPrac1.txt		   First CMEE practical for Unix. Questions, answers and comments included.
│   └── variables.sh		   Shell script using variables
├── Data
│   ├── fasta
│   │   ├── 407228326.fasta
│   │   ├── 407228412.fasta
│   │   └── E.coli.fasta
│   ├── spawannxs.txt
│   └── Temperatures
│       ├── 1800.csv
│       ├── 1800.txt
│       ├── 1801.csv
│       ├── 1801.txt
│       ├── 1802.csv
│       ├── 1802.txt
│       ├── 1803.csv
│       └── 1803.txt
├── README.txt
├── Results                	   All outputs will be directed here. Contains gitignore file, thus empty repository.  
│   └── FirstExample.pdf   	   LaTeX output pdf 
└── Sandbox
    ├── ListRootDir.txt
    ├── Sandbox.test.txt
    ├── TestFile
    ├── TestFind
    │   ├── Dir1
    │   │   ├── Dir11
    │   │   │   └── Dir111
    │   │   │       └── File111.txt
    │   │   ├── File1.csv
    │   │   ├── File1.tex
    │   │   └── File1.txt
    │   ├── Dir2
    │   │   ├── File2.csv
    │   │   ├── File2.tex
    │   │   └── File2.txt
    │   └── Dir3
    │       └── File3.txt
    ├── test.txt
    ├── test.txt.csv
    └── TestWild
        ├── Anotherfile.csv
        ├── Anotherfile.txt
        ├── File1.csv
        ├── File1txt
        ├── File2.csv
        ├── File2.txt
        ├── File3.csv
        ├── File3.txt
        ├── File4.csv
        └── File4.txt

13 directories, 50 files

**********************************************************************

Found following files in results directory: .gitignore...
Found 14 code files: ConcatenateTwoFiles.sh, .txt, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, csvtospace.sh, TranslateEg.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, boilerplate.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott David.Scott18@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: Takes two files (as variables $1, $2) and merges them together as a new
#       file ($3). File names are written in the command line after 
#	bash ConcatenateTwoFiles.sh respectively. 
# Arguments: Two files $1 $2 to be merged together.
# Date: Oct 2018

cat $1 > $3     #Takes content of first variable (file) and duplicates it in variable 3 (creates new file).
cat $2 >> $3	#Appends the content of variable 2 (second file) to the end of variable 3 (file created). 
echo "Merged File is"
cat $3
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
Merged File is

**********************************************************************

Encountered error:
ConcatenateTwoFiles.sh: line 10: $3: ambiguous redirect
ConcatenateTwoFiles.sh: line 11: $3: ambiguous redirect

======================================================================
Inspecting script file .txt...

File contents are:
**********************************************************************
**********************************************************************

Testing .txt...

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott david.scott18@imperial.ac.uk
# Script: CountLines.sh
# Desc: Counts the number of lines in a file, assigns cout to a variable 
#       and prints results as a text string. 
# Arguments: $1 file to have lines counted
# Date: Oct 2018

NumLines=`wc -l < $1`  # redirects content of $1 file to the standard input of command
			# command wc -l counts number of lines 
			# output value then stored as variable NumLines 
echo "The file $1 has $NumLines lines"  # prints string with input file name ($1) and output value ($NumLines)
echo

**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
The file  has  lines


**********************************************************************

Encountered error:
CountLines.sh: line 9: $1: ambiguous redirect

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott david.scott18@imperial.ac.uk
# Script: variables.sh
# Desc: Shell script 
# Arguments: 
# Date: Oct 2018

# Shows the use of variables 
MyVar='some string'
echo 'the current value of the variable is' $MyVar 
echo 'Please enter a new string'
read MyVar 
echo 'the current value of the variable is' $MyVar 

## Reading multiple values 
echo 'Enter two numbers sepearted by space(s)'
read a b 
echo 'you entered' $a 'and' $b '. Their sum is:'
mysum=`expr $a + $b`
echo $mysum 
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
the current value of the variable is some string
Please enter a new string
the current value of the variable is
Enter two numbers sepearted by space(s)
you entered and . Their sum is:


**********************************************************************

Encountered error:
expr: syntax error

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott David.Scott18@imperial.ac.uk
# Script: CompileLaTeX.sh
# Desc: Compile LaTeX with bibtex 
# Arguments: $1 
# Date: Oct 2018

pdflatex $1    #Did not add .tex so that code can freely read .tex file
pdflatex $1
texfile="${1//.tex/}"  #created a new variable texfile which removes the .tex from file assigned to $1 
bibtex $texfile   #Uses new variable textfile as bibtex cannot have file with .tex
pdflatex $1 
pdflatex $1 
mv $texfile.pdf ../Results       # moves output (pdf version of texfile) to Results
evince ../Results/$texfile.pdf & # displays pdf output on screen 

## Cleanup  # Removing all other files created other than .bib .pdf and .tex
rm *~
rm *.aux
rm *.bbl   # .bbl also added to script to remove 
rm *.blg   # .blg also added to script to remove as these files are not required
rm *.dvi
rm *.log
rm *.nav 
rm *.out
rm *.snm
rm *.toc
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
**
! End of file on the terminal... why?
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
**
! End of file on the terminal... why?
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
**
! End of file on the terminal...
**********************************************************************

Encountered error:
bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
mv: cannot stat '.pdf': No such file or directory
rm: cannot remove '*~': No such file or directory
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory
rm: cannot remove '*.dvi': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.nav': No such file or directory
rm: cannot remove '*.out': No such file or directory
rm: cannot remove '*.snm': No such file or directory
rm: cannot remove '*.toc': No such file or directory

** (evince:27814): WARNING **: Error when getting information for file '/home/mhasoba/Documents/Teaching/IC_CMEE/2018-19/Coursework/StudentRepos/DavidThomasScott_DTS18/Week1/Results/.pdf': No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

** (evince:27814): WARNING **: Error setting file metadata: No such file or directory

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott david.scott18@imperial.ac.uk
# Script: tiff2png.sh
# Desc: Converts a .tif file to a .png file
# Arguments: $*.tif 
# Date: Oct 2018

for f in $*.tif;   # sets .tif file as variable f
   do 
       echo "Converting $f";  # prints string with name of .tif file (f)
       convert "$f"  "$(basename "$f" .tif).png"; #converts variable f to png 
						  #  while maintaining basename f
    done  					  #    i.e basename.png
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Converting .tif

**********************************************************************

Encountered error:
convert: unable to open image `.tif': No such file or directory @ error/blob.c/OpenBlob/2712.
convert: no decode delegate for this image format `' @ error/constitute.c/ReadImage/501.
convert: no images defined `.tif.png' @ error/convert.c/ConvertImageCommand/3210.

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash 
# Author: David Scott david.scott18@imperial.ac.uk
# Script: csvtospace.sh
# Desc: substitute a comma for a space, creating a new .txt version of file. 
# Arguments: $1 csv file, of which a duplicate space delimited version is to be made
# Date: Oct 2018

echo "Creating a space delimited version of $1 ..." # Prints string stating which file ($1)
					 	#is to be converted from comma to space seperated. 
file="${1//.csv/}"                       #removes the .csv extension of variable 1. Replaces it with nothing. 
cat $1 | tr "," " " >> $file.txt 	# Reads content of variable 1 as an output, piped, then translates occurances 				# of commas to space and appends content to a new .txt version without the csv extension ($1).
echo "Done!" 					# Prints "Done!" when complete
exit 

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a space delimited version of  ...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.01490s

======================================================================
Inspecting script file TranslateEg.sh...

File contents are:
**********************************************************************
# !/bin/bash
# Author: David Scott David.Scott18@imperial.ac.uk
# Script: TranslateEg.sh
# Desc: Three uses of the translate (tr) command: Remove spaces, letters, change case
# Arguments: none
# Date: Oct 2018

echo "remove    excess   spaces." | tr -s "\b" " " # Compresses a series of identical characters to single characters
							# in this case multiple spaces (blank characters) to a single

echo "remove all the as" | tr -d "a" # Deletes all occurances of a specified character from an input. In this case "a" 

echo "set to uppercase" | tr [:lower:] [:upper:] # Translates input from lower to upper. Can be done vice versa

echo "10.00 only numbers 1.33" | tr -d [:alpha:] | tr -s " " "," # Delete all letters (alpha), compress similar 
                                                                   #   characters and seperate with a comma. 
**********************************************************************

Testing TranslateEg.sh...

Output (only first 500 characters): 

**********************************************************************
remove excess spaces.
remove ll the s
SET TO UPPERCASE
10.00,1.33

**********************************************************************

Code ran without errors

Time consumed = 0.01439s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\title{A Simple Document}
\author{David Scott}
\date{}
\begin{document}
  \maketitle

  \begin{abstract}
    This paper must be cool!
  \end{abstract}

  \section{Introduction}
    Blah Blah!

  \section{Materials \& Methods}
  One of the most famous equations is:
  \begin{equation}
    E = mc^2
  \end{equation}
  This was first proposed by Einstein in 1905
  \cite{einstein1905does}.

  \bibliographystyle{plain}
  \bibliography{FirstBiblio}
\end{document}

\grid
\grid
\grid
\grid
\grid
\grid
\grid
\grid
\grid
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott David.Scott18@imperial.ac.uk
# Script: MyExampleScript.sh
# Desc: Example script printing using variables
# Arguments: 1 $USER for username 
# Date: Oct 2018

msg1="Hello" #creates variable and assigns string "Hello" to variable 
msg2=$USER #creates variable and assigns variable $USER which displays username
echo "$msg1 $msg2" #prints variables created
echo "Hello $USER" #prints "Hello" and $USER from variable input. thus same thing printed twice 
			# using different techniques   
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.01062s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--641},
  year={1905}
}
**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
#Author: David Scott david.scott18@imperial.ac.uk
#Script: UnixPrac1
#Desc: First CMEE practical for Unix. Questions, answers and comments included.
#	all answers are written as single line commands.  
#Arguments:
#Date: October 10th 2018

##############  1  ################
#1 Count how many lines are in each file 

wc -l ../Data/fasta/*.fasta

#count lines in any file with this directory that ends in .fasta

#ALTERANTIVE: find ../Data/fasta/*.fasta -exec wc -l {} \;


###############  2  ###############
#2 Print everything starting from the second line for the E.coli genome

grep -v E.coli ../Data/fasta/E.coli.fasta

# (grep -v) invert match for excluding specific string (E.coli), from specific file path 
#    (../Data/fasta/E.coli.fasta)

# ALTERANTIVE tail -n+2 could be used if unable to access file and view it. i.e you just knew you had to start from line 2. This can be used in every subsequent command. 


##############  3  ################
#3 Count the sequence length of the E.coli genome

grep -v E.coli ../Data/fasta/E.coli.fasta | tr -d "\n" | wc -m

# First part of code as above, then (|) piped through (tr -d "\n") to remove all newline characters
#  making the sequence one line, and finally (| wc -m) counts all remaining characters.


##############  4  ################
#4 Count the matches of "ATGC" sequence in the E.coli genome

grep -v E.coli ../Data/fasta/E.coli.fasta | tr -d "\n" | grep -o "ATGC" | wc -l

# First part as above. Piped through grep -o "ATGC", this takes each occurence of "ATGC" from the line and    
#     creates a new line. Finally piped through wc -l to count the lines, as each "ATGC" accounts for one line.


#############  5  #################
#5 Compute the AT/GC ratio

echo $(grep -v E.coli ../Data/fasta/E.coli.fasta | tr -d "\n" | grep -o [A,T] | wc -l) / $(grep -v E.coli ../Data/fasta/E.coli.fasta | tr -d "\n" | grep -o [G,C] | wc -l) | bc -l

# Used same code as above but tweaked so that grep - o would create a new line for each occurance of A or T [A,T] 
# Repeated but grep -o for the occurance of G or C [G,C]. 
# Made both lines of code variables using $()
# Used echo to print the results of each onto the screen seperated by a /
# This would have resulted in 2306454 / 2379681 printed on screen, 
#               i.e the sum needed for calculation of ratio in question. 
# But as it was piped through bc -l within the one command line the command printed the final calculated ratio
# bc -l runs calculator in interactive mode using the standard math library 
 
#############  Bash Command Challenge ###############

find ../Sandbox . -type f -exec ls -s {} \; | sort -n | head -10

# find file with directory ../Sandbox 
# file is a regular file type 
# -exec COMMAND attaches command to file search and {} runs it on each file found \; until the last one.
# ls -s prints the size of each file, in blocks.
# sort -n sorts files numerically 
# head -10 prints the first 10 files. 


**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott david.scott18@imperial.ac.uk
# Script: tabtocsv.sh
# Desc: substitute the tabs in the files with commas
# Arguments: 1 -> tab delimited file
# Date: Oct 2018 

echo "Creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv 
echo "Done!"
exit 

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a comma delimited version of  ...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.01070s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: David Scott David.Scott18@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2018

echo -e "\nThis is a shell script! \n" 
	# echo -e: Enables interception of backlash escapes, which are special characters. 
	# In this case \n signifies an empty line before and after the printing of "This is a shell script!".  
#exit 
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00720s

======================================================================
======================================================================
Finished running scripts

Ran into 5 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!