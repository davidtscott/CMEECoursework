}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## 29
fern_2 <- function(start_position, direction, length, dir){
e = length / length
start_position <- turtle(start_position, direction, length)
if (length > e){
dir = dir * -1
fern_2(start_position, (direction + (pi/4 * dir)), (length * 0.38), -dir)
fern_2(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
start_position <- turtle(start_position, direction, length)
if (length > 1){
challenge_G(start_position, (direction + (pi/4 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
start_position <- turtle(start_position, direction, length)
if (length > 1){
challenge_G(start_position, (direction + (pi/1 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
start_position <- turtle(start_position, direction, length)
if (length > 1){
challenge_G(start_position, (direction + (pi/2 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
start_position <- turtle(start_position, direction, length)
if (length > 1){
challenge_G(start_position, (direction + (pi/6 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
start_position <- turtle(start_position, direction, length)
if (length > 1){
challenge_G(start_position, (direction + (pi/4 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/4), length)
tree(start_position, (direction + pi/4), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi), length)
tree(start_position, (direction + pi), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/2), length)
tree(start_position, (direction + pi/2), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/3), length)
tree(start_position, (direction + pi/3), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/5), length)
tree(start_position, (direction + pi/5), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/6), length)
tree(start_position, (direction + pi/6), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/4), length)
tree(start_position, (direction + pi/4), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 1
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/5), length)
challenge_F1(start_position, (direction + pi/5), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 1
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/4), length)
challenge_F1(start_position, (direction + pi/4), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 1
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/8), length)
challenge_F1(start_position, (direction + pi/8), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/8), length)
challenge_F1(start_position, (direction + pi/8), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/2), length)
challenge_F1(start_position, (direction + pi/8), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/7), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/2), length)
challenge_F1(start_position, (direction + pi/7), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/6), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/8), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/10), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/8), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/7), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
if (length > 1){
start_position <- turtle(start_position, direction, length)
challenge_G(start_position, (direction + (pi/4 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## 29
fern_2 <- function(start_position, direction, length, dir){
e = length / length
start_position <- turtle(start_position, direction, length)
if (length > e){
dir = dir * -1
fern_2(start_position, (direction + (pi/4 * dir)), (length * 0.38), -dir)
fern_2(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## challenge_G
challenge_G <- function(start_position, direction, length, dir){
if (length > 1){
start_position <- turtle(start_position, direction, length)
challenge_G(start_position, (direction + (pi/4 * (dir * -1))), (length * 0.38), -dir)
challenge_G(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
library(qdap)
library("qdap")
install.packages("qdap")
library("qdap")
library(qdap)
require("qdap")
library("qdap")
character_count(readLines("clipboard", warn = FALSE), count.space = TRUE)
## 29
fern_2 <- function(start_position, direction, length, dir){
e = length / length
start_position <- turtle(start_position, direction, length)
if (length > e){
dir = dir * -1
fern_2(start_position, (direction + (pi/4 * dir)), (length * 0.38), -dir)
fern_2(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## 29
fern_2 <- function(start_position, direction, length, dir){
e = length / length
start_position <- turtle(start_position, direction, length)
if (length > e){
dir = dir * -1
fern_2(start_position, (direction + (pi/4 * dir)), (length * 0.38), -dir)
fern_2(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
## 27
tree <- function(start_position, direction, length){
e = length / length
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
tree(start_position, (direction - pi/4), length)
tree(start_position, (direction + pi/4), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
tree(start_position = c(-300, 200), direction = pi/2, length = 75)
## 26
spiral_2 <- function(start_position, direction, length){
e = length / length
if (length > e){
start_position <- turtle(start_position, direction, length)
direction = direction - pi/4
length = length * 0.95
spiral_2(start_position, direction, length)
}
}
plot(-150, 150, axes = F, xlab = NA, ylab = NA, cex = 0.001)
spiral_2(start_position = c(-150, 150), direction = pi/2, length = 20)
## challenge_F
challenge_F1 <- function(start_position, direction, length){
e = 0.5
start_position <- turtle(start_position, direction, length)
length = length * 0.65
if (length > e){
challenge_F1(start_position, (direction - pi/3), length)
challenge_F1(start_position, (direction + pi/7), length)
}
}
plot(-300, 300, axes = F, xlab = NA, ylab = NA, cex = 0.001)
challenge_F1(start_position = c(-300, 200), direction = pi/2, length = 70)
## 29
fern_2 <- function(start_position, direction, length, dir){
e = length / length
start_position <- turtle(start_position, direction, length)
if (length > e){
dir = dir * -1
fern_2(start_position, (direction + (pi/4 * dir)), (length * 0.38), -dir)
fern_2(start_position, direction, (length * 0.87), dir)
}
}
plot(-600, 600,axes = F, xlab = NA, ylab = NA, cex = 0.001)
fern_2(start_position = c(-600, 400), direction = pi/2, length = 60, dir = -1)
rm(list = ls())
graphics.off()
# packages
library(igraph) # Load the igraph package
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
source('~/Documents/CMEECourseWork/Week3/Code/browse.R')
setwd("~/Documents/CMEECourseWork/Week3/Code")
source('~/Documents/CMEECourseWork/Week3/Code/PP_Lattice.R')
# Open blank pdf page using a relative path and specifies page dimensions in inches
print(densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
xlab="Log Predator Mass (g)", main="Density Plot by Feeding Interaction Type", col="purple"))
## predator mass:   Pred_Lattice.pdf
pdf("../Results/Pred_Lattice.pdf") #11.7, 8.3)
# Open blank pdf page using a relative path and specifies page dimensions in inches
print(densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
xlab="Log Predator Mass (g)", main="Density Plot by Feeding Interaction Type", col="purple"))
source('~/Documents/CMEECourseWork/Week3/Code/PP_Lattice.R')
rm(list = ls()) #clears workspaces
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
#initiate plot and assign data to variables
#subset graph by Type of feeding interactio and colour by Predator.lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
# add points of shape 3(crosses) and regression lines with standard error.
# adjusted length and width of line.
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5)
# changed x and y axis to log10 and added labels
p <- p + scale_x_log10() + scale_y_log10() + xlab("Prey Mass in grams") + ylab("Predator mass in grams")
# changes theme to black and white
# moves legned to bottom and displays in one row
p <- p + theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
# Open blank pdf page using a relative path
pdf("../Results/PP_Regress.pdf", 11.7, 8.3)
print(p)
#initiate plot and assign data to variables
#subset graph by Type of feeding interactio and colour by Predator.lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
## Packages ##
library(ggplot2)
library(plyr)
library(dplyr)
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
#initiate plot and assign data to variables
#subset graph by Type of feeding interactio and colour by Predator.lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
# add points of shape 3(crosses) and regression lines with standard error.
# adjusted length and width of line.
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5)
# changed x and y axis to log10 and added labels
p <- p + scale_x_log10() + scale_y_log10() + xlab("Prey Mass in grams") + ylab("Predator mass in grams")
# changes theme to black and white
# moves legned to bottom and displays in one row
p <- p + theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
# Open blank pdf page using a relative path
pdf("../Results/PP_Regress.pdf", 11.7, 8.3)
print(p)
source('~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R')
source('~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R')
source('~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R')
print(p)
p
p
source('~/Documents/CMEECourseWork/Week3/Code/PP_Regress.R')
#initiate plot and assign data to variables
#subset graph by Type of feeding interactio and colour by Predator.lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p
# add points of shape 3(crosses) and regression lines with standard error.
# adjusted length and width of line.
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5)
p
# changed x and y axis to log10 and added labels
p <- p + scale_x_log10() + scale_y_log10() + xlab("Prey Mass in grams") + ylab("Predator mass in grams")
p
# changes theme to black and white
# moves legned to bottom and displays in one row
p <- p + theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
p
print(p)
# Open blank pdf page using a relative path
pdf("../Results/PP_Regress.pdf", 11.7, 8.3)
print(p)
dev.off()
