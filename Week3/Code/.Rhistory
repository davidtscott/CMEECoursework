p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- ggplot(MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous() +
scale_y_continuous()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous(trans = "log") +
scale_y_continuous(trans = "log")
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous(trans = "log", label = scientific) +
scale_y_continuous(trans = "log")
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous(trans = "log", label = scientific) +
scale_y_continuous(trans = "log", label = scientific)
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous(trans = "log", label = scientific) +
scale_y_continuous(trans = "log", label = scientific, limits = c(1e-06, 1e+06))
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_continuous(trans = "log", label = scientific) +
scale_y_continuous(trans = "log",  limits = c(1e-06, 1e+06))
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log(label = scientific) +
scale_y_log(label = scientific, limits = c(1e-06, 1e+06))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log10(label = scientific) +
scale_y_log10(label = scientific, limits = c(1e-06, 1e+06))
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log10(label = scientific) +
scale_y_log10(label = scientific)
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log10(label = scientific) +
scale_y_log10(label = scientific)
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log10() +
scale_y_log10(label = scientific)
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE) +
scale_x_log10() +
scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom")
p
p
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
p
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 1))
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 5) +
scale_x_log10() + scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 1))
p
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5) +
scale_x_log10() + scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 1))
p
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5) +
scale_x_log10() + scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 1))
p
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 1))
p
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
p
a <- read.table("../Data/Results.txt", header = TRUE)
head(MyDF)
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))}
library(tidyverse)
library(dplyr)
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))}
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))}
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))}
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyData))}
fitted_models = for i in MyDF$Type.of.feeding.interaction{
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyData))}
fitted_models = for i in MyDF$Type.of.feeding.interaction{
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyData))}
fitted_models = for i in MyDF$Type.of.feeding.interaction{
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyData))}
l
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyData))}
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models = for (i in MyDF$Type.of.feeding.interaction){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models = for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models = for (i in unique(MyDF$Predator.lifestage)){
group_by(MyDF$Type.of.feeding.interaction) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models = for (i in unique(MyDF$Predator.lifestage)){
group_by(MyDF$Type.of.feeding.interaction) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models = for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
# Open blank pdf page using a relative path
pdf("../Results/PP_Regress.pdf", 11.7, 8.3)
print(p)
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass))}
modelll <- group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
modelll <- group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))
fitted_models<- for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
head(MyDF)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage, log = "xy")) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5) +
scale_x_log10() + scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
print(p)
fitted_models<- for (i in unique(MyDF$Type.of.feeding.interaction)){
group_by(MyDF$Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
for (j in unique(MyDF$Predator.lifestage))}
fitted_models<- for (i in unique(MyDF$Type.of.feeding.interaction)){
for (j in unique(MyDF$Predator.lifestage))}
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
for (j in unique(MyDF$Predator.lifestage))}
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
for (j in unique(MyDF$Predator.lifestage))}
d
fitted_models <- for (i in unique(MyDF$Type.of.feeding.interaction)){
for (j in unique(MyDF$Predator.lifestage))}
MyDF %>% group_by(Tyoe.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = MyDF))}
MyDF %>% group_by(Tyoe.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass))
MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass))
MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))
fitted_models
fitted_models$model
install.packages(broom)
install.packages("broom")
library(broom)
fitted_models %>% tidy(model)
fitted_models %>% glance(model)
fitted_models %>% augment(model)
fitted_models %>% augment(model)
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
c <- fitted_models %>% augment(model)
names(a)
names(b)
names(c)
a <- fitted_models %>% tidy(model)  %>% glance(model)
names(a)
merge(a, b)
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
names(a)
names(b)
merge(a, b)
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
c <- merge(a, b)
names(c)
head(c)
head(a)
c
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
names(a)
names(b)
c <- merge(a, b)
head(a)
head(c)
install.packages("broom")
fitted_models
a
b
c <- merge(a, b,by = Type.of.feeding.interaction, Predator.lifestage)
c <- merge(a, b,by = Type.of.feeding.interaction)
c <- merge(a, b,by = "Type.of.feeding.interaction", "Predator.lifestage")
head(c)
c <- merge(a, b,by = "Type.of.feeding.interaction")
head(c)
names(b)
names(a)
head(c)
c <- merge(a, b,by = "Type.of.feeding.interaction", "Predator.lifestage")
head(c)
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(model = lm(Predator.mass ~ Prey.mass, data = .))
fitted_models$model
install.packages("broom")
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
a
b
fitted_models
fitted_models$model
fitted_models$model[1]
coef(fitted_models$model[1])
coef(fitted_models$model[[1]])
resid(fitted_models$model[[1]])
fitted_models$model
fitted_models
model_coefs <- fitted_models %>% group_by(model) %>% coef(summary) #(model))["F stat"]
a <- fitted_models %>% tidy(model)
b <- fitted_models %>% glance(model)
names(a)
names(b)
a <- fitted_models %>% tidy(model)
#initiate plot and asss
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5) +
scale_x_log10() + scale_y_log10()
p <- p + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
print(p)
#initiate plot and assign data to variables
#subset graph by Type of feeding interactio and colour by Predator.lifestage
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) +
facet_grid(rows = vars(Type.of.feeding.interaction))
# add points of shape 3(crosses) and regression lines with standard error.
# adjusted length and width of line.
# chnaged x and y axis to log10
p <- p + geom_point(shape = 3) + geom_smooth(method = "lm", se=TRUE, fullrange=TRUE, size = 0.5)
p <- p + scale_x_log10() + scale_y_log10() + xlab("Prey Mass in grams") + ylab("Predator mass in grams") +
theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(nrow = 1))
print(p)
# Open blank pdf page using a relative path
pdf("../Results/PP_Regress.pdf", 11.7, 8.3)
print(p)
PP
##
lm_out <- dlplyr(PP,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm (Predator.mass~Prey.mass))
library(plyr)
library(dplyr)
##
lm_out <- dlplyr(fitted_models,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm (Predator.mass~Prey.mass))
##
lm_out <- dlply(fitted_models,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm (Predator.mass~Prey.mass))
# Extract
out <- ldply (lm_out, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
##
lm_out <- dlply(fitted_models,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm (Predator.mass~Prey.mass))
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract
out <- ldply (fitted_models$model, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(lm_out, function(x) summary(x)$fstatistic[1])
# Extract
out <- ldply (fitted_models$model, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(lm_out, function(x) summary(x)$fstatistic[1])
# f stat
F.statistic <- ldply(fitted_models$model, function(x) summary(x)$fstatistic[1])
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
names(final_out)[7] <- "F.statistic"
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract
out <- ldply (fitted_models$model, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(fitted_models$model, function(x) summary(x)$fstatistic[1])
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(lm(Predator.mass ~ Prey.mass, data = .))
fitted_models$model
fitted_models
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
##
lm_out <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass))
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
##
lm_out <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass))
View(MyDF)
##
lm_out <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract
out <- ldply (fitted_models$model, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(fitted_models$model, function(x) summary(x)$fstatistic[1])
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
##
lm_out <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract
out <- ldply (lm_out, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(lm_out, function(x) summary(x)$fstatistic[1])
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
names(final_out)[7] <- "F.statistic"
final_out
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% do(function(x) lm(Predator.mass ~ Prey.mass, data = x))
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% (function(x) lm(Predator.mass ~ Prey.mass, data = x))
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(fitted_models, function(x) summary(x)$fstatistic[1])
# Extract
out <- ldply (fitted_models, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% (function(x) lm(Predator.mass ~ Prey.mass, data = x))
fitted_models
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) #%>% (function(x) lm(Predator.mass ~ Prey.mass, data = x))
fitted_models
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% (function(x) lm(Predator.mass ~ Prey.mass, data = .))
#calculate reg results for fitted lines in each subset of data
fitted_models <- MyDF %>% group_by(Type.of.feeding.interaction, Predator.lifestage) %>% (function(x) lm(Predator.mass ~ Prey.mass, data = MyDF))
fitted_models
##
lm_out <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract
out <- ldply (lm_out, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# f stat
F.statistic <- ldply(lm_out, function(x) summary(x)$fstatistic[1])
final_out <- merge(out, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
names(final_out)[7] <- "F.statistic"
write.csv(final_out, "../Results/PP_Regress_Results.csv", row.names = FALSE, quote = FALSE)
final_out
?write.csv
source("PP_Regress.R")
source("PP_Regress.R")
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
## calculate reg results for fitted lines in each subset of data
LinearOutput <- dlply(MyDF,.(Location, Type.of.feeding.interaction, Predator.lifestage), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract Coeffieciets r2, intercept, slope and p value
CoefOut <- ldply (LiearOutput, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract Coeffieciets r2, intercept, slope and p value
CoefOut <- ldply (LinearOutput, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract F statistic
F.statistic <- ldply(LinearOutput, function(x) summary(x)$fstatistic[1])
# Merge F stat with rest of coefficients into one dataframe
OutputDF <- merge(CoefOut, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
# change name of 7th columm
names(OutputDF)[7] <- "F.statistic"
OutputDF
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
## calculate reg results for fitted lines in each subset of data
LinearOutput <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage, Location), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract Coeffieciets r2, intercept, slope and p value
CoefOut <- ldply (LinearOutput, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract F statistic
F.statistic <- ldply(LinearOutput, function(x) summary(x)$fstatistic[1])
# Merge F stat with rest of coefficients into one dataframe
OutputDF <- merge(CoefOut, F.statistic, by = c("Type.of.feeding.interaction", "Predator.lifestage"), all = TRUE)
# change name of 7th columm
names(OutputDF)[7] <- "F.statistic"
OutputDF
## calculate reg results for fitted lines in each subset of data
LinearOutput2 <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage, Location), function(x) lm(Predator.mass~Prey.mass, data = x))
rm(list = ls())
# read data from file to dataframe
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv", stringsAsFactors=FALSE)
## calculate reg results for fitted lines in each subset of data
LinearOutput2 <- dlply(MyDF,.(Type.of.feeding.interaction, Predator.lifestage, Location), function(x) lm(Predator.mass~Prey.mass, data = x))
# Extract Coeffieciets r2, intercept, slope and p value
CoefOut2 <- ldply (LinearOutput2, function(x) {
intercept <- summary(x)$coefficients[1]
slope <- summary(x)$coefficients[2]
p.value <- summary(x)$coefficients[8]
r2 <- summary(x)$r.squared
data.frame(r2, intercept, slope, p.value)})
# Extract F statistic
F.statistic2 <- ldply(LinearOutput2, function(x) summary(x)$fstatistic[1])
# Merge F stat with rest of coefficients into one dataframe
OutputDF2 <- merge(CoefOut2, F.statistic2, by = c("Type.of.feeding.interaction", "Predator.lifestage", "Location"), all = TRUE)
# change name of 7th columm
names(OutputDF2)[7] <- "F.statistic"
OutputDF2
# write results to a csv file in the results directory
write.csv(OutputDF, "../Results/PP_Regress_loc_Results.csv", row.names = FALSE, quote = FALSE)
# write results to a csv file in the results directory
write.csv(OutputDF2, "../Results/PP_Regress_loc_Results.csv", row.names = FALSE, quote = FALSE)
source("PP_Regress_loc.R")
source("PP_Lattice.R")
